# coding:UTF-8from flask import Flask, request, render_template, redirect, url_forimport MySQLdb as mysqlimport jsonimport timeimport tracebackapp = Flask(__name__)conn = mysql.connect(user='root', host='127.0.0.1', passwd='1q2w3e4r', db='reboot10', charset='utf8')conn.autocommit(True)cur = conn.cursor()@app.route('/', methods=("GET", "POST"))def user_login():	error = None	message = 'login ok'	field = ['name', 'password']	if request.method == 'POST':		data = {}		data = dict(request.form)		if not data[field[0]][0] or not data[field[1]][0]:			error = 'username or password could not be null!!!!'			return render_template('login.html', error=error)		try:			sql_user = "select 1 from users where name = '%s'" % (data['name'][0])			cur.execute(sql_user)			user_stored = cur.fetchone()			if not user_stored:				error = 'username is incorrect'				return render_template('login.html', error=error)			else:				if data['name'][0] == 'admin':					sql_password = "select %s from users where name ='%s' " % (field[1], data['name'][0])					cur.execute(sql_password)					password_stored = cur.fetchone()[0]					if data[field[1]][0] == password_stored:						message = 'welcome admin'						# return render_template('login.html', message=message)						return redirect('/userlist')					else:						error = 'password incorrect !!'						return render_template('login.html', error=error)				else:					sql_password = "select %s from users where name ='%s' " % (field[1], data['name'][0])					cur.execute(sql_password)					password_stored = cur.fetchone()[0]					# conn.close()					# cur.close()					if data[field[1]][0] == password_stored:						message = 'welcome %s to login system' % data['name'][0]						# return render_template('login.html', message=message)						return redirect(url_for('user', name=data['name'][0]))					else:						error = 'password incorrect !!'						return render_template('login.html', error=error)		except(mysql.MySQLError, Exception):			error = 'db error'			return render_template('login.html', error=error)	return render_template('login.html', error=error)@app.route('/user')def user():	where = {}	where['name'] = request.args.get('name', None)	print where['name']	if not where['name']:		errmsg = 'must have a name'		return render_template('user.html', result=errmsg)	else:		condition = 'name="%(name)s"' % where		print condition		fields = ['id', 'name', 'name_cn', 'email', 'mobile', 'role', 'status']		sql = "select %s from users where %s" % (','.join(fields), condition)		print sql		try:			cur.execute(sql)			res = cur.fetchall()			user = dict((k, res[0][i]) for i, k in enumerate(fields))			print user			return render_template('user.html', user=user)		except:			errmsg = 'get user info failed'			return render_template('login.html')@app.route('/userlist')def userlist():	users = []	fields = ['id', 'name', 'name_cn', 'email', 'mobile', 'role', 'status']	try:		sql = "select %s from users " % ','.join(fields)		cur.execute(sql)		result = cur.fetchall()		users = [dict((k, row[i]) for i, k in enumerate(fields)) for row in result]		return render_template('userlist.html', users=users)	except:		errmsg = 'select userlist failed'		print traceback.print_exc()		return render_template('userlist.html', result=errmsg)@app.route('/register', methods=["GET", "POST"])def register():	if request.method == "POST":		data = {}		data["name"] = request.form.get('name', None)		data["name_cn"] = request.form.get('name_cn', None)		data["mobile"] = request.form.get('mobile', None)		data["email"] = request.form.get('email', None)		data["role"] = request.form.get('role', None)		data["status"] = request.form.get('status', None)		data["password"] = request.form.get('password', None)		data["repwd"] = request.form.get('repwd', None)		data["create_time"] = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(time.time()))		fields = ['name', 'name_cn', 'email', 'role', 'mobile', 'status', 'password', 'create_time']		if not data["name"] or not data["password"] or not ["role"]:			errmsg = 'name or password or role not null'			return render_template('register.html', result=errmsg)		if data["password"] != data["repwd"]:			errmsg = 'The two passwords you typed do not match'			return render_template('register.html', result=errmsg)		try:			sql = 'insert into users(%s) values (%s)' % (','.join(fields), ','.join(['"%s"' % data[x] for x in fields]))			print sql			cur.execute(sql)			return redirect('/user?name=%s' % data['name'])		except:			errmsg = "insert failed"			print traceback.print_exc()			return render_template("register.html", result=errmsg)	return render_template("register.html")@app.route('/update', methods=['GET', 'POST'])def update():	id = request.args.get('id')	fields = ['id', 'name', 'name_cn', 'email', 'mobile']	if not id:		errmsg = "must have id"		if request.method == "POST":			data = dict(request.form)			conditions = ["%s='%s'" % (k, v[0]) for k, v in data.items()]			sql = 'update users set %s where name ="%s"  ' % (','.join(conditions), data['name'][0])			print sql			cur.execute(sql)			return redirect('/userlist')		return render_template("update.html", result=errmsg)	else:		try:			sql = "select %s from users where id = %s " % (','.join(fields), id)			cur.execute(sql)			res = cur.fetchone()			user = {}			for i, k in enumerate(fields):				user[k] = res[i]			return render_template('update.html', user=user)		except:			errmsg = "get one failed"			print traceback.print_exc()			return render_template("update.html", result=errmsg)@app.route('/userupdate', methods=['GET', 'POST'])def userupdate():	id = request.args.get('id')	fields = ['id', 'name', 'name_cn', 'email', 'mobile']	if not id:		errmsg = "must have id"		if request.method == "POST":			data = dict(request.form)			conditions = ["%s='%s'" % (k, v[0]) for k, v in data.items()]			sql = 'update users set %s where name ="%s"  ' % (','.join(conditions), data['name'][0])			print sql			cur.execute(sql)			return redirect(url_for('user', name=data['name'][0]))		return render_template("userupdate.html", result=errmsg)	else:		try:			sql = "select %s from users where id = %s " % (','.join(fields), id)			cur.execute(sql)			res = cur.fetchone()			user = {}			for i, k in enumerate(fields):				user[k] = res[i]			return render_template('userupdate.html', user=user)		except:			errmsg = "get one failed"			print traceback.print_exc()			return render_template("userupdate.html", result=errmsg)@app.route('/delete', methods=['GET'])def delete():	id = request.args.get('id', None)	if not id:		error = "could not found user "		return render_template("user_list.html", error=error)	try:		conn = mysql.connect(user='root', host='127.0.0.1', passwd='1q2w3e4r', db='reboot10', charset='utf8')		cur = conn.cursor()		sql = "select name from users where id = %s" % id		cur.execute(sql)		conn.commit		cur.close		conn.close		return 'deleted'	# return redirect('/users')	except:		error = "delete failed"		return render_template("user_list.html", error=error)			if __name__ == '__main__':	app.run(host='0.0.0.0', port=8080, debug=True)